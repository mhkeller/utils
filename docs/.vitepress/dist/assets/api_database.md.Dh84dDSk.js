import{_ as a,c as s,o as e,ae as i}from"./chunks/framework.BuyCb9nx.js";const u=JSON.parse('{"title":"Database Functions","description":"","frontmatter":{},"headers":[],"relativePath":"api/database.md","filePath":"api/database.md"}'),t={name:"api/database.md"};function n(l,o,p,r,d,c){return e(),s("div",null,o[0]||(o[0]=[i(`<h1 id="database-functions" tabindex="-1">Database Functions <a class="header-anchor" href="#database-functions" aria-label="Permalink to &quot;Database Functions&quot;">​</a></h1><p>Utilities for working with PostgreSQL and other databases.</p><h2 id="connectpg" tabindex="-1">connectPg <a class="header-anchor" href="#connectpg" aria-label="Permalink to &quot;connectPg&quot;">​</a></h2><p><strong>File:</strong> <code>db/connectPg.js</code></p><p>Create a connection pool to a PostgreSQL database</p><p><strong>Parameters:</strong></p><ul><li><code>config</code> (Object) - Configuration object</li><li><code>config.PG_HOST</code> (string) - PostgreSQL host</li><li><code>config.PG_DB</code> (string) - PostgreSQL database name</li><li><code>config.PG_USER</code> (string) - PostgreSQL username</li><li><code>config.PG_PW</code> (string, optional) - PostgreSQL password</li><li><code>config.PG_PORT</code> (number, optional) - PostgreSQL port</li></ul><p><strong>Returns:</strong></p><ul><li>pg.Pool - PostgreSQL connection pool</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { connectPg } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for connectPg</span></span></code></pre></div><h2 id="settableupload" tabindex="-1">setTableUpload <a class="header-anchor" href="#settableupload" aria-label="Permalink to &quot;setTableUpload&quot;">​</a></h2><p><strong>File:</strong> <code>db/setTableUpload.js</code></p><p>Set up a table for uploading</p><p><strong>Parameters:</strong></p><ul><li><code>tableName</code> (string) - Name of table to upload to</li><li><code>options</code> (object) - Options object</li><li><code>options.cols</code> (string[]) - Columns to upload</li><li><code>options.idColumn=&#39;id&#39;</code> (string, optional) - Name of column to use as primary key</li><li><code>options.logEvery=1_500</code> (number, optional) - How often to log</li><li><code>options.total</code> (number, optional) - Total number of rows to upload</li><li><code>options.indent</code> (number, optional) - How much to indent logs</li><li><code>options.mapRow</code> (function, optional) - Function to map each row before uploading</li></ul><p><strong>Returns:</strong></p><ul><li>PromiseObject with pool: Pool, uploadRow: Function - &gt; - Pool and uploadRow function</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { setTableUpload } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for setTableUpload</span></span></code></pre></div><h2 id="uploadrows" tabindex="-1">uploadRows <a class="header-anchor" href="#uploadrows" aria-label="Permalink to &quot;uploadRows&quot;">​</a></h2><p><strong>File:</strong> <code>db/uploadRows.js</code></p><p>Uploads rows to a table</p><p><strong>Parameters:</strong></p><ul><li><code>tableName</code> (string) - Name of table to upload to</li><li><code>rows</code> (object[] or string[]) - Rows to upload. If an array of strings, must also provide <code>mapRow</code> option</li><li><code>options</code> (object, optional) - Options object</li><li><code>options.idColumn=&#39;id&#39;</code> (string, optional) - Name of column to use as primary key</li><li><code>options.mapRow</code> (function, optional) - Function to map each row before uploading</li><li><code>options.indent=3</code> (number, optional) - How much to indent logs</li><li><code>options.uploadConcurrency=1500</code> (number, optional) - Number of concurrent uploads</li></ul><p><strong>Returns:</strong></p><ul><li>Promise(void) - Promise that resolves when upload is complete</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { uploadRows } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for uploadRows</span></span></code></pre></div>`,29)]))}const h=a(t,[["render",n]]);export{u as __pageData,h as default};
