import{_ as a,c as s,o as i,ae as t}from"./chunks/framework.BuyCb9nx.js";const k=JSON.parse('{"title":"Array & Object Utils","description":"","frontmatter":{},"headers":[],"relativePath":"api/array-object.md","filePath":"api/array-object.md"}'),n={name:"api/array-object.md"};function r(l,e,o,p,h,c){return i(),s("div",null,e[0]||(e[0]=[t(`<h1 id="array-object-utils" tabindex="-1">Array &amp; Object Utils <a class="header-anchor" href="#array-object-utils" aria-label="Permalink to &quot;Array &amp; Object Utils&quot;">​</a></h1><p>Functions for working with arrays, objects, and data structures.</p><h2 id="createlookup" tabindex="-1">createLookup <a class="header-anchor" href="#createlookup" aria-label="Permalink to &quot;createLookup&quot;">​</a></h2><p><strong>File:</strong> <code>lib/createLookup.js</code></p><p>Creates a Map lookup from an array of objects</p><p><strong>Parameters:</strong></p><ul><li><code>list</code> (Array(Object)) - The array of objects to create a lookup from</li><li><code>key</code> (string) - The key in each object to use as the Map key</li></ul><p><strong>Returns:</strong></p><ul><li>Map(any, Object) - A Map where the keys are the values of the specified property and the values are the original objects</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createLookup } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for createLookup</span></span></code></pre></div><h2 id="makearray" tabindex="-1">makeArray <a class="header-anchor" href="#makearray" aria-label="Permalink to &quot;makeArray&quot;">​</a></h2><p><strong>File:</strong> <code>lib/makeArray.js</code></p><p>Make an array of n elements</p><p><strong>Parameters:</strong></p><ul><li><code>n</code> (number) - The number of elements</li></ul><p><strong>Returns:</strong></p><ul><li>Array(undefined) - An array of n undefined elements</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { makeArray } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for makeArray</span></span></code></pre></div><h2 id="pick" tabindex="-1">pick <a class="header-anchor" href="#pick" aria-label="Permalink to &quot;pick&quot;">​</a></h2><p><strong>File:</strong> <code>lib/pick.js</code></p><p>Creates a new object with only the specified keys from the source object</p><p><strong>Parameters:</strong></p><ul><li><code>obj</code> (Record(string, any)) - The source object to filter</li><li><code>keys</code> (Array(string)) - The keys to include in the resulting object</li></ul><p><strong>Returns:</strong></p><ul><li>Record(string, any) - A new object containing only the specified keys</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { pick } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for pick</span></span></code></pre></div><h2 id="takeevery" tabindex="-1">takeEvery <a class="header-anchor" href="#takeevery" aria-label="Permalink to &quot;takeEvery&quot;">​</a></h2><p><strong>File:</strong> <code>lib/takeEvery.js</code></p><p>Take every nth element from a list, approximately dividing the list into n chunks</p><p><strong>Parameters:</strong></p><ul><li><code>list</code> (Array(any)) - The input array</li><li><code>n</code> (number) - The target number of elements to return</li></ul><p><strong>Returns:</strong></p><ul><li>Array(any) - A new array with approximately n elements taken at regular intervals</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { takeEvery } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for takeEvery</span></span></code></pre></div><h2 id="uniques" tabindex="-1">uniques <a class="header-anchor" href="#uniques" aria-label="Permalink to &quot;uniques&quot;">​</a></h2><p><strong>File:</strong> <code>lib/uniques.js</code></p><p>Calculate unique values from a list with an optional iterator string or function. By default return the transformed value if iteratee exists.</p><p><strong>Parameters:</strong></p><ul><li><code>list</code> (Array(any)) - An array of values or objects.</li><li><code>accessor</code> (string or Function, optional) - An optional accessor function that takes an object and returns the value to judge uniqueness by.</li><li><code>transform=true</code> (boolean, optional) - If true, return the transformed value from accessor.</li></ul><p><strong>Returns:</strong></p><ul><li>Array(any) or null - Array of unique values or null if input is not an array</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { uniques } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for uniques</span></span></code></pre></div>`,47)]))}const u=a(n,[["render",r]]);export{k as __pageData,u as default};
