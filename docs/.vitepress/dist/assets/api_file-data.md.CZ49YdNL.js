import{_ as s,c as e,o as t,ae as i}from"./chunks/framework.BuyCb9nx.js";const g=JSON.parse('{"title":"File & Data","description":"","frontmatter":{},"headers":[],"relativePath":"api/file-data.md","filePath":"api/file-data.md"}'),n={name:"api/file-data.md"};function l(r,a,p,o,h,d){return t(),e("div",null,a[0]||(a[0]=[i(`<h1 id="file-data" tabindex="-1">File &amp; Data <a class="header-anchor" href="#file-data" aria-label="Permalink to &quot;File &amp; Data&quot;">​</a></h1><p>Functions for reading, writing, and processing data files.</p><h2 id="fetchdata" tabindex="-1">fetchData <a class="header-anchor" href="#fetchdata" aria-label="Permalink to &quot;fetchData&quot;">​</a></h2><p><strong>File:</strong> <code>lib/fetchData.js</code></p><p>Fetches data from a given URL using the native fetch API.</p><p><strong>Parameters:</strong></p><ul><li><code>url</code> (string) - The URL to fetch data from.</li></ul><p><strong>Returns:</strong></p><ul><li>Promise(object) - A promise that resolves with the parsed JSON data.</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fetchData } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for fetchData</span></span></code></pre></div><h2 id="formatparams" tabindex="-1">formatParams <a class="header-anchor" href="#formatparams" aria-label="Permalink to &quot;formatParams&quot;">​</a></h2><p><strong>File:</strong> <code>lib/formatParams.js</code></p><p>Format params to be used in a URL</p><p><strong>Parameters:</strong></p><ul><li><code>params</code> (Object) - The parameters to format</li></ul><p><strong>Returns:</strong></p><ul><li>string - The query parametrized string</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatParams } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for formatParams</span></span></code></pre></div><h2 id="gendirs" tabindex="-1">genDirs <a class="header-anchor" href="#gendirs" aria-label="Permalink to &quot;genDirs&quot;">​</a></h2><p><strong>File:</strong> <code>lib/genDirs.js</code></p><p>Generate the input and output directory filepaths</p><p><strong>Parameters:</strong></p><ul><li><code>importMeta</code> (ImportMeta) - The import.meta object</li><li><code>baseDir=&#39;&#39;</code> (string, optional) - The base directory</li></ul><p><strong>Returns:</strong></p><ul><li>{inDir: string, outDir: string - } An object with the input and output directory filepaths</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { genDirs } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for genDirs</span></span></code></pre></div><h2 id="readdataset" tabindex="-1">readDataset <a class="header-anchor" href="#readdataset" aria-label="Permalink to &quot;readDataset&quot;">​</a></h2><p><strong>File:</strong> <code>lib/readDataset.js</code></p><p>Reads a dataset from a file</p><p><strong>Parameters:</strong></p><ul><li><code>filepath</code> (string) - Path to the dataset file</li></ul><p><strong>Returns:</strong></p><ul><li>{filepath: string, data: Array(any) - } Object containing the filepath and the parsed data</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readDataset } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for readDataset</span></span></code></pre></div><h2 id="readxlsx" tabindex="-1">readXlsx <a class="header-anchor" href="#readxlsx" aria-label="Permalink to &quot;readXlsx&quot;">​</a></h2><p><strong>File:</strong> <code>lib/readXlsx.js</code></p><p>Read an XLSX file and return the data as a JSON object. If no <code>sheetName</code> is supplied, return the first sheet.</p><p><strong>Parameters:</strong></p><ul><li><code>filepath</code> (string) - The path to the XLSX file.</li><li><code>sheetName</code> (string, optional) - The name of the sheet to read.</li></ul><p><strong>Returns:</strong></p><ul><li>Array(Object) - The data from the XLSX file as an array of objects.</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readXlsx } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for readXlsx</span></span></code></pre></div><h2 id="writesync" tabindex="-1">writeSync <a class="header-anchor" href="#writesync" aria-label="Permalink to &quot;writeSync&quot;">​</a></h2><p><strong>File:</strong> <code>lib/writeSync.js</code></p><p>Write a data file</p><p><strong>Parameters:</strong></p><ul><li><code>outpath</code> (string) - The path to write to</li><li><code>data</code> (Array(any) or Object) - The data to write</li><li><code>options</code> (Object, optional) - Options object</li><li><code>options.indent</code> (number, optional) - If writing a JSON file, the number that will be passed to JSON.stringify to pretty print the object</li><li><code>options.logIndent=0</code> (number, optional) - How many tabs to indent the log</li></ul><p><strong>Returns:</strong></p><ul><li>void -</li></ul><p><strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { writeSync } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@mhkeller/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage example for writeSync</span></span></code></pre></div>`,56)]))}const k=s(n,[["render",l]]);export{g as __pageData,k as default};
